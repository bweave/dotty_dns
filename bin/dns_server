#!/usr/bin/env ruby

require "rubydns"
require_relative "../config/environment"

INTERFACES = [[:udp, "0.0.0.0", 53], [:tcp, "0.0.0.0", 53]].freeze
IN = Resolv::DNS::Resource::IN
# use Cloudflare's public family-friendls DNS servers
UPSTREAM = RubyDNS::Resolver.new([[:udp, "1.1.1.3", 53], [:tcp, "1.0.0.3", 53]])

# Monkey patch and add @start_time to #process_query so that we can track execution time
module RubyDNS
  class RuleBasedServer < Async::DNS::Server
    def process_query(query, options = {}, &block)
      @start_time = Time.now
      super
    end
  end
end

RubyDNS.run_server(INTERFACES) do # rubocop:disable Metrics/BlockLength
  # Use upstream DNS for name resolution.
  @logger = Logger.new($stderr)
  # log all the things so we can see what's going on
  @logger.level = :debug
  # TIL: this prevents write buffering and forces output immediately
  $stderr.sync = true

  @cache = Redis.dns_cache

  DnsRecord
    .not_wildcards
    .in_batches(of: 10_000)
    .each do |batch|
      records = batch.pluck(:domain, :ip_address).to_h
      @cache.write_multi(records)
    end

  match(//, IN::A) do |transaction|
    ip_address = @cache.fetch(transaction.name)
    if ip_address
      debug "Cached answer for #{transaction.name}: #{ip_address}"
      log_query(transaction:, ip_address:)
      transaction.respond!(ip_address)
    else
      next!
    end
  end

  DnsRecord
    .wildcards
    .find_each
    .pluck(:domain, :ip_address)
    .map do |(domain, ip_address)|
      wildcard_domain_regex = /#{domain.gsub("*.", ".+")}/

      match(wildcard_domain_regex, IN::A) do |transaction|
        debug "Wildcard answer for #{transaction.name}: #{ip_address}"
        log_query(transaction:, ip_address:)
        @cache.write(transaction.name, ip_address)
        transaction.respond!(ip_address)
      end
    end

  otherwise do |transaction|
    debug "Asking upstream for #{transaction.name}"
    transaction.passthrough!(UPSTREAM) do |response|
      answer = response.answer.first&.[](2)
      if answer
        debug "Upstream answer for #{transaction.name} is a #{answer.class}"
      else
        # TODO: SOAs have no answer, but tell us when to retry (I think), so what should we do here?
        debug <<~MSG
          Got a nil upstream for #{transaction.name} so here's some debugging info:
          response is a #{response.class}
          response: #{response.inspect}
          response.answer is a #{response.answer.class}
          response answer: #{response.answer.inspect}
          response.answer.first is a #{response.answer.first.class}
          response.answer.first: #{response.answer.first.inspect}
        MSG
      end
      if answer.is_a?(IN::A) || answer.is_a?(IN::AAAA) # || answer.is_a?(IN::CNAME)
        ip_address = answer.address.to_s
        expires_in = answer.ttl
        debug "Upstream answer for #{transaction.name}: #{ip_address} (expires in #{expires_in} seconds)"
        log_query(transaction:, ip_address:, reply_from: "1.1.1.3")
        @cache.write(transaction.name, ip_address, expires_in:)
      else
        # TODO: CNAMEs have a name, not an address, which points to another domain, so maybe another
        # request is needed to resolve to the final IP address?
        debug <<~MSG
        Answer for #{transaction.name} is not an A or AAAA, it's a #{answer.class}, so here's some debugging info:
          answer: #{answer.inspect}
          ip_address: #{answer.address}
          ttl: #{answer.ttl}
        MSG
      end
    end
  end

  def log_query(transaction:, ip_address:, reply_from: "0.0.0.0")
    attributes = {
      domain: transaction.name,
      requested_by: transaction.options.fetch(:remote_address).ip_address,
      dns_type: DnsQuery.dns_types[:A],
      status: DnsQuery.status_for(ip_address),
      reply_from:,
      reply_type: DnsQuery.reply_types[:IP],
      reply_time_ms: Time.now - @start_time
    }
    CreateDnsQueryWorker.perform_later(**attributes)
  rescue ActiveModel::MissingAttributeError => e
    debug <<~ERR
      Something went wrong with logging this query:
      #{e.message}
      ----
      transaction: #{transaction.inspect}
      ip_address: #{ip_address.inspect}
      reply_from: #{reply_from.inspect}
      attributes: #{attributes.inspect}
      ----
      #{e.backtrace.join("\n")}
    ERR
  end

  def debug(msg)
    logger.debug "-" * 80
    logger.debug msg
    logger.debug "-" * 80
  end
end
